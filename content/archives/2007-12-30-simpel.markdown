---
layout: post
title: "SimPEL"
date: "2007-12-30T11:18:00+01:00"
comments: false
categories: 
---

<p>According to <a href="http://mult.ifario.us/articles/2007/12/18/scripting-for-the-cloud">Paul Brown</a>, <a href="http://offthelip.org/">Matthieu Riou</a>, <a href="http://www.taval.de/">Tammo van Lessen</a> and others are working on a sort of compact syntax for BPEL (check out an example usage <a href="http://svn.apache.org/viewvc/ode/sandbox/simpel/src/test/resources/loan-approval.simpel?revision=605313">here</a>).</p>

<p>Two things I&#8217;m wondering: (1) Can Ode orchestrate plain RESTful HTTP interactions? (2) How about using <a href="http://jruby.codehaus.org/">a language</a> that supports internal DSLs and allows for easy access of Java libraries?</p>

<section class="comments">



<div class="comment" id="comment-1551">
On <a href="#comment-1551" title="Permalink to this comment">December 30, 2007  3:00 PM</a>, Tammo van Lessen
said:
<p>It seems to get around ;) Hopefully the WSDL crowd is coming up with something similar.</p>

<p>There is also a work-in-progress <a href="http://cwiki.apache.org/ODExSITE/bpel-simplified-syntax-simbpel.html" rel="nofollow">wiki page</a> (it is currently a bit out-dated but contains some additional information). The major goal of SimPEL is to provide a more readable syntax for BPEL, without angle brackets and with way more convenient variable assignment mechanisms (E4X-like). However, at least for this first basic SimPEL version, we try to stick on BPEL concepts so that a (more or less straightforward) translation between SimPEL and BPEL is still possible.</p>

<p>Regarding (1): Not yet. <a href="http://labnotes.org/" rel="nofollow">Assaf</a> has written a proposal for a RESTful BPEL variant (<a href="http://cwiki.apache.org/ODExSITE/restful-bpel-part-i.html" rel="nofollow">1</a>, <a href="http://cwiki.apache.org/ODExSITE/restful-bpel-part-ii.html" rel="nofollow">2</a>) but it&#8217;s not been implemented yet.
Regarding (2): BPEL is mainly used to define long-running processes, whose instances may be hibernated until some events or messages arrive. It is also very likely that a huge number of process instances are running in parallel. I don&#8217;t think a common scripting language interpreter can handle such a scenario. But ODE&#8217;s pi-calculus engine can ;)</p>


<div class="comment" id="comment-1552">
On <a href="#comment-1552" title="Permalink to this comment">December 30, 2007  3:06 PM</a>, <a href="/blog/st/">Stefan Tilkov</a>

<a href="/blog/st/" class="commenter-profile"><img src="/mt4/mt-static/images/comment/mt_logo.png" height="16" alt="Author Profile Page" width="16" /></a>
said:
<p>Thanks for the answer. Regarding 2: I was thinking of <em>combining</em> the Ode engine with an existing interpreter - i.e. the handling of a huge number of long-running, incomplete, parallel processes would be done by the engine, and this would be exposed as an API to Ruby. The Ruby DSL would get &#8220;translated&#8221; into API calls, with the benefit of having an existing interpreter and a full language to escape to if necessary.</p>


<div class="comment" id="comment-1556">
On <a href="#comment-1556" title="Permalink to this comment">December 31, 2007 11:27 PM</a>, <a href="http://www.ebpml.org/ebpml_radio.htm" title="http://www.ebpml.org/ebpml_radio.htm" rel="nofollow">Jean-Jacques Dubray</a>
said:
<p>Stefan:</p>

<p>It is interesting to see such an initiative. Just a couple of years ago, there were so many people that were still fighting the idea that BPEL and BPML were &#8220;just a programming language&#8221; with very interesting properties such as:</p>

<p>&#8220;BPEL is mainly used to define long-running processes, whose instances may be hibernated until some events or messages arrive. It is also very likely that a huge number of process instances are running in parallel. I donâ€™t think a common scripting language interpreter can handle such a scenario [you bet]&#8221;</p>

<p>Now, wsper (http://www.wsper.org) provides a much broader programming model than SimPEL. wsper is also resource oriented. </p>

<p>The problem with BPEL as a programming language (with an XML syntax or not) is that it is just an orchestration language receiving/sending messages in the pure pi-calculus sense. This is a very poor way to think in terms of what an orchestration language can do. If you associate the concept of resource with orchestration, you get a much more powerful and meaningful programming language. </p>

<p>JJ-</p>


</section>

