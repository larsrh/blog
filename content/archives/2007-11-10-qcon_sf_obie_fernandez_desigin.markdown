---
layout: post
title: "QCon SF: Obie Fernandez -- \"Desiging RESTful Rails applications\""
date: "2007-11-10T08:52:00+01:00"
comments: false
categories: 
---

<p>These are my unedited notes from Obie Fernandez&#8217;s talk</p>

<ul>
<li>introduction to REST - Obie focuses on C/S architecture, stateless communication, and caching</li>
<li>REST support in Rails: view helper methods and enhancements to the routing system</li>
<li>more than a set of naming conventions</li>
<li>benefits: convenience for the developer, a REST interface for everyone else</li>
<li>much of Rails non-compliant with the precepts of REST</li>
<li>every real-world Rails app contains sessions, uses cookies</li>
<li>started out with Routing and CRUD</li>
<li>it&#8217;s good to use CRUD-based names</li>
<li>much of Rails&#8217; REST support is easy generation of named routes</li>
<li>example: <code>map.resource :auctions</code> - will create 4 named routes for 7 controller actions</li>
<li>difference between resources and representations</li>
<li><em>opinionated</em> REST support</li>
<li>emphasis: resources should not be confused with the actual physical things in your systems</li>
<li>actual code samples - explanation of the link between the name of a route and the generated _path method</li>
<li>instead of having <code>auction\_path</code>, <code>auction\_delete\_path</code> and <code>auction\_create\_path</code>, pick <code>auction\_path</code> and <code>auctions\_path</code></li>
<li>(it&#8217;s interesting to note that Obie uses a mix of speaking freely and obviously reading from notes. hm.)</li>
<li>overloading based on the HTTP verb</li>
<li>explanation of the stuff generated by <code>map.resources :auctions</code> (I&#8217;ll skip this, look it up)</li>
<li>rules for request methods - default is GET, in form_tag or form_for, POST is used</li>
<li>explanation of the PUT and DELETE hack</li>
<li>creation and update require two &#8220;extra&#8221; actions (new and edit) to display the forms, kind of like a pre-resource</li>
<li>extra named routes: <code>new\_item\_path</code> and <code>edit\_item\_path</code></li>
<li>singular named routes (<code>map.resource</code> instead of the plural form) allow you to identify things that exist only once</li>
<li>yields <code>address\_book\_url</code> and <code>address\_book\_path</code> only</li>
<li>example: login is something you&#8217;d model as a POST and DELETE on a single &#8220;session&#8221; resource (I find this entirely unconvincing)</li>
<li>nested resources, example bids as nested resources of an auction</li>
<li><code>/auctions/3/bids/5</code></li>
<li>why not <code>/bids/5</code>? URL is more informative, longer URL allows access to the auction id via <code>params[:auction\_id]</code></li>
<li>nesting can be of any depth -  recommendation: 2 levels at the most</li>
<li>controller by default gets the same name as the (plural) resource name</li>
<li>RESTful route customization: <code>:members =&gt; { :retract =&gt; :get}</code> within the nested bid resource</li>
<li><code>:any</code> instead of <code>:get</code> will map any sort of request to the same action</li>
<li>instead of a retract action, a more RESTful way would be a retraction resource </li>
<li>analogy: RESTfulness, like normalization, is not binary</li>
<li>Pete Lacey suggests using a PUT with a new state to retract a bid</li>
<li>Obie suggests the goal should be to keep your actions concise and to the point</li>
<li>different representations of resources: responds_to (using .xml as an example)</li>
<li>additional view helpers: <code>formatted\_auction\_path(auction, "xml")</code> (I didn&#8217;t know this)</li>
<li>Question: When to add &#8220;.xml&#8221; to the end? What about the location header - should it point to the .xml </li>
<li>Comment from the audience: some caches don&#8217;t cache if you don&#8217;t have an extension</li>
<li>Ola Bini and Pete Lacey argue about status codes and text support in Rails</li>
<li>Pete: will there be an ability to use something in the URL that doesn&#8217;t map to a controller </li>
<li>Comment: there&#8217;s a separators array that allows you to customize this</li>
<li>regexp mappings in route are possible</li>
<li>conditions on routes allow for additional flexibility</li>
</ul>

<p>I knew about 90% of all this, but the Q&#38;A was helpful. Good talk.</p>


